<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GmodMongoDb</name>
    </assembly>
    <members>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.#ctor(GmodNET.API.ILua,System.String)">
            <summary>
            Create a wrapper that can create wrappers for any type
            </summary>
            <param name="lua"></param>
            <param name="baseName"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.GetTypeTable(System.Type,System.String@)">
            <summary>
            Gets or creates the Type table (and all parent tables) for the given type. Puts it on top of the stack.
            </summary>
            <param name="type"></param>
            <param name="lastPartName"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.RegisterType(System.Type)">
            <summary>
            Registers a type in sub-tables for each namespace part (seperated by dots)
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.SetStaticManagedMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Assumes the type table is on top of the stack.
            </summary>
            <param name="anyMethod"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.SetManagedMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets or creates a metatable and adds this method to it. It will later be used
            as the metatable for instances of this constructor.
            Assumes the type table is on top of the stack.
            </summary>
            <param name="anyMethod"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.SetConstructorManagedMethod(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            Sets a function to return a table with the metatable.
            Assumes the type table is on top of the stack.
            </summary>
            <param name="anyConstructor"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.SetManagedProperty(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Assumes the type table is on top of the stack.
            </summary>
            <param name="property"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.SetManagedField(System.Reflection.FieldInfo,System.Type)">
            <summary>
            Assumes the type table is on top of the stack.
            </summary>
            <param name="field"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.GetInstanceId(GmodNET.API.ILua)">
            <summary>
            Gets the instance ID from the instance on the stack
            </summary>
            <param name="lua"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.CleanTypeMetaTables(GmodNET.API.ILua)">
            <summary>
            Removes all type metatables to clear references.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.Setup(GmodNET.API.ILua)">
            <summary>
            Registers helpful Lua functions and constants
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.PullInstance(GmodNET.API.ILua,System.Int32)">
            <summary>
            Creates a metatable for the given type. Puts it on top of the stack.
            </summary>
            <param name="lua"></param>
            <param name="stackPos"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.PushInstance(GmodNET.API.ILua,System.Object)">
            <summary>
            Creates a table for the object, assigning the appropriate type metatable and keeping a reference to the object pointer.
            Leaves the instance table on top of the stack.
            </summary>
            <param name="lua"></param>
            <param name="instance"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.CreateTypeMetaTable(GmodNET.API.ILua,System.Type)">
            <summary>
            Creates a table for the type and puts it on top of the stack. Should be used as a metatable.
            </summary>
            <param name="lua"></param>
            <param name="type"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.IsTypeMetaTable(GmodNET.API.ILua,System.Int32)">
            <summary>
            Checks if the table on top of the stack is a type metatable.
            </summary>
            <param name="lua"></param>
            <param name="stackPos"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.GetTypeMetaTableType(GmodNET.API.ILua,System.Int32)">
            <summary>
            Gets the type stored with the metatable.
            </summary>
            <param name="lua"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.InstanceRepository.PushTypeMetatable(GmodNET.API.ILua,System.Type,System.Nullable{GmodMongoDb.Binding.TypeMetaSubTables})">
            <summary>
            Pushes a metatable onto the stack for this type (fetching it from the registry). It creates a new metatable if it doesn't exist yet.
            </summary>
            <param name="lua"></param>
            <param name="type"></param>
            <param name="subTableToPush"></param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaExtensions">
            <summary>
            Helpful functions to debug or message in Lua
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.Print(GmodNET.API.ILua,System.Object)">
            <summary>
            Prints a message in Lua
            </summary>
            <param name="lua"></param>
            <param name="message">The message to show</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.PrintTable(GmodNET.API.ILua,System.Int32)">
            <summary>
            Prints a table in Lua
            </summary>
            <param name="lua"></param>
            <param name="index"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.GetStack(GmodNET.API.ILua)">
            <summary>
            Builds a string representation of the stack by traversing all values on the Lua stack.
            </summary>
            <param name="lua"></param>
            <returns>A string containing the types on the stack</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.PushType(GmodNET.API.ILua,System.Object)">
            <summary>
            Creates a metatable for the given type. Puts it on top of the stack.
            </summary>
            <param name="lua"></param>
            <param name="value"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.PushManagedFunctionWrapper(GmodNET.API.ILua,GmodMongoDb.Binding.InstanceRepository,System.Type,System.String,System.Boolean)">
            <summary>
            Pushes a function onto the stack that redirects calls to the specified method on the specified type.
            </summary>
            <param name="lua"></param>
            <param name="instanceRepository"></param>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="isStatic"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunction.Get(GmodNET.API.ILua,System.Int32)">
            <summary>
            Reads the Lua function at the top of the stack and returns it as a <see cref="T:GmodMongoDb.Binding.LuaFunction"/>.
            </summary>
            <param name="lua"></param>
            <param name="stackPos"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunction.Push(GmodNET.API.ILua)">
            <summary>
            Pushes this Lua function to the top of the stack.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunction.GetCastsTo(System.Type)">
            <summary>
            Gets whether LuaFunction can cast to the specified type.
            </summary>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunction.CastTo(System.Type)">
            <summary>
            Returns a delegate or an expression containing a delegate that will call this Lua function.
            This way a Lua function (of unknown signature) can be used for any delegate in C#.
            </summary>
            <param name="expectedType"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:GmodMongoDb.Binding.TypeTools">
            <summary>
            Helps converting between .NET objects/types and Lua types
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.IsLuaType(System.Type)">
            <summary>
            Returns whether the given type is a primitive type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.IsLuaType(System.Object)">
            <summary>
            Returns whether the given object is a primitive type.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PushType(GmodNET.API.ILua,System.Object)">
            <summary>
            Push a value of to the Lua stack.
            </summary>
            <param name="lua"></param>
            <param name="value">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PushTypes(GmodNET.API.ILua,System.Object[])">
            <summary>
            Push multiple values to the Lua stack.
            </summary>
            <param name="lua"></param>
            <param name="values">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PushType(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            Push a value of a specific type to the Lua stack.
            </summary>
            <param name="lua"></param>
            <param name="type">The type of the value to push</param>
            <param name="value">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PullType(GmodNET.API.ILua,System.Type,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <param name="lua"></param>
            <param name="type">The expected type of the value on the stack</param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PullType(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and try convert it to an associated .NET type.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.LuaTypeToDotNetType(GmodNET.API.TYPES)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.LuaTypeToDotNetType(System.Int32)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert (must be castable to <see cref="T:GmodNET.API.TYPES"/>)</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.NormalizeParameters(System.Object[],System.Reflection.ParameterInfo[])">
            <summary>
            Converts the parameters to the types specified in the <paramref name="parameterInfos"/> array.
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfos"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.NormalizeParameterTypes(System.Collections.Generic.List{System.Type},System.Reflection.ParameterInfo[])">
            <summary>
            Converts the parameter types to the types specified in the <paramref name="parameterInfos"/> array.
            </summary>
            <param name="parameterTypes"></param>
            <param name="constructorParameters"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:GmodMongoDb.Setup">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleName">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleVersion">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Load(GmodNET.API.ILua,System.Boolean,GmodNET.API.ModuleAssemblyLoadContext)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Unload(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.WarnIfObsolete(System.Reflection.MemberInfo,GmodNET.API.ILua)">
            <summary>
            Gives a warning if the ObsoleteAttribute is found on the member.
            </summary>
            <param name="member"></param>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.GetMethodsWithBase(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.GetMethodSignatures(System.Type,System.String)">
            <summary>
            Returns a string describing all available method signatures
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.GetConstructorSignatures(System.Type)">
            <summary>
            Returns a string describing all available constructor signatures
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.GetAppropriateMethod(System.Type,System.String,System.Collections.Generic.List{System.Type}@)">
            <summary>
            Gets a method that fits the provided parameter types
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.GetAppropriateConstructor(System.Type,System.Collections.Generic.List{System.Type}@)">
            <summary>
            Gets a constructor that fits the provided parameter types
            </summary>
            <param name="type"></param>
            <param name="parameterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Checks a generic type to see if it is assignable to another generic type.
            https://stackoverflow.com/a/5461399
            </summary>
            <param name="thisGenericType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.IsAssignableFromGenericType(System.Type,System.Type)">
            <summary>
            Checks a generic type to see if it is assignable from another generic type.
            </summary>
            <param name="thisGenericType"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Util.ReflectionExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            https://stackoverflow.com/a/457708
            </summary>
            <param name="rawGeneric"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
