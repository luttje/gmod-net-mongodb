<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GmodMongoDb</name>
    </assembly>
    <members>
        <member name="M:GmodMongoDb.Binding.DynamicWrapper.GetNamespaceTable(System.String)">
            <summary>
            Gets or creates the namespace table (and all parent tables) for the given type. Puts it on top of the stack.
            </summary>
            <param name="namespace"></param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaExtensions">
            <summary>
            Helpful functions to debug or message in Lua
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.Print(GmodNET.API.ILua,System.String)">
            <summary>
            Prints a message in Lua
            </summary>
            <param name="lua"></param>
            <param name="message">The message to show</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.GetStack(GmodNET.API.ILua)">
            <summary>
            Builds a string representation of the stack by traversing all values on the Lua stack.
            </summary>
            <param name="lua"></param>
            <returns>A string containing the types on the stack</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.TypeTools">
            <summary>
            Helps converting between .NET objects/types and Lua types
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PushType(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            Push a value of a specific type to the Lua stack. Applies a transformer where possible.
            </summary>
            <param name="lua"></param>
            <param name="type">The type of the value to push</param>
            <param name="value">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PullType(GmodNET.API.ILua,System.Type,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <param name="lua"></param>
            <param name="type">The expected type of the value on the stack</param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PullType(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and try convert it to an associated .NET type.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.PullType``1(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <typeparam name="T">The expected type of the value on the stack</typeparam>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.TryGetMetaTableType(System.Int32,System.Type@)">
            <summary>
            Try to convert a Lua type to a metatable.
            </summary>
            <param name="luaType">The type id that's suspected to be a metatable type</param>
            <param name="result">The converted .NET type on success. Null otherwise.</param>
            <returns>If the type is succesfully converted to a metatable type.</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.LuaTypeToDotNetType(GmodNET.API.TYPES)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeTools.LuaTypeToDotNetType(System.Int32)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert (must be castable to <see cref="T:GmodNET.API.TYPES"/>)</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="T:GmodMongoDb.Setup">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleName">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleVersion">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Load(GmodNET.API.ILua,System.Boolean,GmodNET.API.ModuleAssemblyLoadContext)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Unload(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
    </members>
</doc>
