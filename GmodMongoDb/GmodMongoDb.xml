<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GmodMongoDb</name>
    </assembly>
    <members>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.PushFunction(GmodNET.API.ILua,System.Reflection.MethodInfo,System.Int32,System.Boolean)">
            <summary>
            Pushes a provided method to the Lua stack. If a method is overloaded a finder will be returned that will scan the stack to find the appropriate method to call.
            </summary>
            <param name="lua"></param>
            <param name="method">The method to push to the Lua stack</param>
            <param name="metaTableTypeId">The type id of the object instance's metatable</param>
            <param name="forceWithoutFinder">Forces the method to be pushed, never pushing the finder</param>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.RunFunction(GmodMongoDb.Binding.LuaMetaObjectBinding,GmodNET.API.ILua,System.Reflection.MethodInfo)">
            <summary>
            Simply runs the specified method on the provided instance, picking arguments from the stack.
            </summary>
            <param name="instance">The object to run the method on</param>
            <param name="lua"></param>
            <param name="method">The method to execute</param>
            <returns></returns>
        </member>
        <member name="T:GmodMongoDb.Binding.Annotating.NamespaceDoc">
            <summary>
            Contains annotations to mark .NET members so they're exposed to Lua.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)">
            <summary>
            Generates userdata with a metatable by looking at attributes on the given object. Pushes the userdata onto the stack.
            </summary>
            <param name="lua"></param>
            <param name="instance">The object to generate into userdata</param>
            <returns>The metatable type id that was created for this userdata</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PushManagedObject(GmodNET.API.ILua,System.String,System.Object)">
            <summary>
            Pushes a .NET managed object onto the stack as userdata.
            
            Consider using <see cref="M:GmodMongoDb.Binding.BindingHelper.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)"/> if you want to interact with the userdata from Lua.
            </summary>
            <param name="lua"></param>
            <param name="typeName">The name for the type metatable</param>
            <param name="managed">The object to convert to userdata and push</param>
            <returns>Returns the metatable type id which was applied to the userdata</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PullManagedObject(GmodNET.API.ILua,System.Int32,System.Int32)">
            <summary>
            Pull userdata from the stack at the given position that has the given type id. Converts it to a .NET object
            </summary>
            <param name="lua"></param>
            <param name="typeId">The metatable type id of the userdata as returned by <see cref="M:GmodMongoDb.Binding.BindingHelper.PushManagedObject(GmodNET.API.ILua,System.String,System.Object)"/> or <see cref="M:GmodMongoDb.Binding.BindingHelper.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)"/></param>
            <param name="stackPos">The position of the managed object</param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PushType(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            Push a value of a specific type to the Lua stack. Applies a transformer where possible.
            </summary>
            <param name="lua"></param>
            <param name="type">The type of the value to push</param>
            <param name="value">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PullType(GmodNET.API.ILua,System.Type,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <param name="lua"></param>
            <param name="type">The expected type of the value on the stack</param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeep">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PullType(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and try convert it to an associated .NET type.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeep">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.PullType``1(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <typeparam name="T">The expected type of the value on the stack</typeparam>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeep">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.LuaTypeToDotNetType(GmodNET.API.TYPES)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.BindingHelper.LuaTypeToDotNetType(System.Int32)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert (must be castable to <see cref="T:GmodNET.API.TYPES"/>)</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer`1">
            <summary>
            Transformers derive from this class. Transformers help convert between .NET and Lua types.
            </summary>
            <typeparam name="TInput">The type to and from which this transformer converts</typeparam>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer`1.#ctor">
            <summary>
            Since a transformer is instantiated with Activator.CreateInstance there should be no parameters on the constructor.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer`1.Convert(GmodNET.API.ILua,`0)">
            <summary>
            Converts a given .NET object and pushes it on the Lua stack.
            </summary>
            <param name="lua"></param>
            <param name="input">The .NET object to convert to Lua</param>
            <returns>The amount of objects pushed to the Lua stack</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer`1.Parse(GmodNET.API.ILua)">
            <summary>
            Pulls an object from the Lua stack and converts it to a .NET object.
            </summary>
            <param name="lua"></param>
            <returns>The parsed .NET object</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.LuaTransformerExtensions">
            <summary>
            Adds extensions relating to data transformation.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaTransformerExtensions.ApplyTransformerConvert(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="lua"></param>
            <param name="transformer">The type of the transformer class (must inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer`1"/>)</param>
            <param name="value">The value to apply the transformer to</param>
            <returns>The amount of Lua objects pushed to the stack by the transformer</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenBsonDocumentListAndTable.CreateLuaBsonDocument(GmodNET.API.ILua,MongoDB.Bson.BsonDocument)">
            <summary>
            Create a <see cref="T:GmodMongoDb.MongoBsonDocument"/> object table with Lua metatable for the given BsonDocument. Pushes the object table to the stack.
            </summary>
            <param name="lua"></param>
            <param name="rawDocument">The true BsonDocument to encapsulate</param>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults">
            <summary>
            Converts between an object array and multiple Lua results.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults.Convert(GmodNET.API.ILua,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults.Parse(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable">
            <summary>
            Converts between a string list and a Lua table containing those strings.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable.Convert(GmodNET.API.ILua,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable.Parse(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenTableAndBsonDocument.CreateLuaBsonDocument(GmodNET.API.ILua,MongoDB.Bson.BsonDocument)">
            <summary>
            Create a <see cref="T:GmodMongoDb.MongoBsonDocument"/> object table with Lua metatable for the given BsonDocument. Pushes the object table to the stack.
            </summary>
            <param name="lua"></param>
            <param name="rawDocument">The true BsonDocument to encapsulate</param>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.NamespaceDoc">
            <summary>
            Contains transformers that help convert between .NET and Lua types.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.PrintFromAsync(GmodNET.API.ILua,System.String)">
            <summary>
            Prints a message the next Lua tick
            </summary>
            <param name="lua"></param>
            <param name="message"></param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaFunctionReference">
            <summary>
            A reference to a Lua function which can be called later.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.#ctor(GmodNET.API.ILua,System.Int32)">
            <summary>
            Create a reference for the function currently on the given position of the stack (or the top by default)
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The stack position of the function to reference</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.IsValid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call(System.Object[])">
            <summary>
            Call this Lua function without expecting results
            </summary>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call(System.Int32,System.Object[])">
            <summary>
            Call this Lua function expecting multiple results
            </summary>
            <param name="numResults">The amount of results we expect from the Lua function</param>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>The returned results in an object array</returns>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call``1(System.Object[])">
            <summary>
            Call this Lua function expecting a scalar result
            </summary>
            <typeparam name="T">The type we expect of the result</typeparam>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>The returned result as the provided type</returns>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <param name="arguments">The parameters to pass to the Lua function</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Int32,System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <param name="numResults">The amount of results we expect from the Lua function</param>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>A task that's called to return the result as the provided type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync``1(System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <typeparam name="T">The type we expect of the result</typeparam>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>A task that's called to return the result as the provided type</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaMetaObjectBinding">
            <summary>
            The baseclass from which metatable classes can inherit. These classes specify how the metatable should look in Lua.
            Metatable classes can be marked with [LuaMetaTable] to give them an explicit type name. Otherwise their class name will be used.
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.LuaMetaObjectBinding.MetaTableTypeId">
            <summary>
            The metatable type id for this object, as returned by `lua.CreateMetaTable`
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.LuaMetaObjectBinding.Reference">
            <summary>
            The pointer to the Lua instance of this object. Only filled when a method on this class is called from Lua.
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaMetaObjectBinding.lua">
            <summary>
            The Lua environment where this object lives
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaMetaObjectBinding.#ctor(GmodNET.API.ILua)">
            <summary>
            
            </summary>
            <param name="lua">The Lua environment where this object lives</param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaReference">
            <summary>
            A reference to a Lua object, for example a table.
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaReference.lua">
            <summary>
            The Lua environment where the reference lives
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaReference.pointer">
            <summary>
            The pointer to the reference in Lua which can be pushed with `lua.ReferencePush` or freed with `lua.ReferenceFree`
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.#ctor(GmodNET.API.ILua,System.Int32)">
            <summary>
            Creates a reference to the Lua object at the given stack position and removes it from the stack.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The Lua object's position on the stack</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.IsValid(System.Int32)">
            <summary>
            Called to check if the Lua reference is of the type we expect it to be.
            </summary>
            <param name="stackPos">The Lua object's position on the stack</param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Free">
            <summary>
            Free the Lua object reference.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Push">
            <summary>
            Push the Lua object reference to the top of the stack.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Dispose">
            <summary>
            Called to dispose of the object. Calls <see cref="M:GmodMongoDb.Binding.LuaReference.Free"/>
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.#ctor(GmodNET.API.ILua,System.Int32)">
            <summary>
            Create a reference for the table currently on the given position of the stack (or the top by default)
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The stack position of the function to reference</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.IsValid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.ForEach(System.Action{System.Object,System.Object})">
            <summary>
            Iterate the Lua table through a callback
            </summary>
            <param name="action">A callback which is given the key and value of each item in the table</param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaTaskScheduler">
            <summary>
            Helps schedule tasks to be executed safely from asynchronous methods.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.AddTask(System.Action)">
            <summary>
            Have an action be called from the Lua context safely and expect nothing to be returned.
            </summary>
            <param name="action">The action to call in the Lua context</param>
            <returns>A task that yields no result</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.AddTask``1(System.Func{``0})">
            <summary>
            Have a function be called from the Lua context safely and expect the given type to be returned.
            </summary>
            <typeparam name="T">The type you expect to be returned</typeparam>
            <param name="function">The function to be called in the Lua context</param>
            <returns>A task that yields a result of the given type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.ProcessQueue(GmodNET.API.ILua)">
            <summary>
            Check if there's tasks queued and call them immediately.
            </summary>
            <param name="lua"></param>
            <returns>Always 0 to inform Lua that nothing was returned from this hook</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.RegisterLuaCallback(GmodNET.API.ILua)">
            <summary>
            Link the LuaTaskScheduler with Lua by hooking into Tick.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.UnregisterLuaCallback(GmodNET.API.ILua)">
            <summary>
            Unlink the LuaTaskScheduler from Lua by removing the appropriate Tick hook.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="T:GmodMongoDb.Binding.NamespaceDoc">
            <summary>
            Contains tools to bind .NET objects with Lua comfortably
            </summary>
        </member>
        <member name="T:GmodMongoDb.Mongo">
            <summary>
            The main Mongo library form which you can instantiate a new client.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Mongo.NewClient(System.String)">
            <summary>
            Initiates a new MongoClient. Only one MongoClient should exist and it should be reused.
            Learn more at <a href="http://mongodb.github.io/mongo-csharp-driver/2.12/reference/driver/connecting/#mongo-client">the .NET Driver MongoClient documentation</a>
            </summary>
            <example>
            Example how to call this method from Lua in order to connect to a database.
            <code language="Lua">
            client = mongo:NewClient("mongodb://username_here:password_here@127.0.0.1:27017/database_here?retryWrites=true&amp;w=majority")
            </code>
            </example>
            <param name="connectionString">The connection string with connection information</param>
            <returns>The MongoClient which will interface with database</returns>
        </member>
        <member name="T:GmodMongoDb.NamespaceDoc">
            <summary>
            Contains the userdata definitions that expose the .NET MongoDB Driver to Lua.
            </summary>
        </member>
    </members>
</doc>
