<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GmodMongoDb</name>
    </assembly>
    <members>
        <member name="T:GmodMongoDb.Binding.Annotating.LuaMetaTableAttribute">
            <summary>
            Apply this attribute to classes to change the metatable type name they'll receive in Lua
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.Annotating.LuaMetaTableAttribute.Name">
            <summary>
            The desired metatable type name in Lua
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMetaTableAttribute.#ctor(System.String)">
            <summary>
            When applying the attribute to a class you can specify a metatable type name
            </summary>
            <param name="name">The metatable type name</param>
        </member>
        <member name="T:GmodMongoDb.Binding.Annotating.LuaMethodAttribute">
            <summary>
            Apply this attribute to methods that should be exposed to Lua.
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.Name">
            <summary>
            The name this method will receive in Lua.
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.IsOverloaded">
            <summary>
            Indicates if multiple methods exist with the same name as the one this attribute is applied to.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.#ctor(System.String)">
            <summary>
            When applying this attribute to methods that should expose to Lua you can specify a name in this constructor.
            </summary>
            <param name="name">The name the method should receive in Lua</param>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.PushFunction(GmodNET.API.ILua,System.Reflection.MethodInfo,System.Int32,System.Boolean)">
            <summary>
            Pushes a function to the Lua stack. Lua can call the provided method and this function will automatically convert the arguments. If a method is overloaded a finder will be activated to inspect the stack and find the appropriate method to call.
            </summary>
            <param name="lua"></param>
            <param name="method">The method to push to the Lua stack</param>
            <param name="metaTableTypeId">The type id of the object instance's metatable</param>
            <param name="forceWithoutFinder">Forces the method to be pushed, never pushing the finder</param>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.ExecuteMethod(GmodMongoDb.Binding.LuaMetaObjectBinding,GmodNET.API.ILua,System.Reflection.MethodInfo)">
            <summary>
            Simply runs the specified method on the provided instance, picking arguments from the stack.
            </summary>
            <param name="instance">The object to run the method on</param>
            <param name="lua"></param>
            <param name="method">The method to execute</param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.Annotating.LuaMethodAttribute.FindAndExecuteMethod(System.Type,GmodMongoDb.Binding.LuaMetaObjectBinding,GmodNET.API.ILua,System.String)">
            <summary>
            Finds a method based on the signature formed by the arguments on the Lua stack
            </summary>
            <param name="instanceType"></param>
            <param name="instance"></param>
            <param name="lua"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="T:GmodMongoDb.Binding.Annotating.NamespaceDoc">
            <summary>
            Contains annotations to mark .NET members so they're exposed to Lua.
            </summary>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BaseLuaValueTransformer">
            <summary>
            Nothing should derive from this class. It is only for detecting which classes are transformers, without having to provide a generic type.
            </summary>
            <remarks>
            If you'd like to create your own transformer you should inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1"/>
            </remarks>
            <example>
            Showing how to get all transformers:
            <code><![CDATA[
            var transformerBaseType = typeof(BaseLuaValueTransformer);
            var types = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(a => a.GetTypes())
                .Where(t => t.IsClass && !t.IsAbstract && t.IsSubclassOf(transformerBaseType));
            ]]></code>
            </example>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults">
            <summary>
            Transformers from an object array to multiple Lua return types or vice versa.
            </summary>
            <example>
            Consider this in C#: 
            <code><![CDATA[
            return object[]{ 1, 2, 3, 4 }
            ]]></code>
            Would equal this in Lua after the transformer is used: 
            <code language="Lua"><![CDATA[
            return 1, 2, 3, 4
            ]]></code>
            </example>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults.Convert(GmodNET.API.ILua,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenObjectArrayAndMultipleResults.TryParse(GmodNET.API.ILua,System.Object[]@,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable">
            <summary>
            Transformers from a string list to a Lua table or vice versa.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable.Convert(GmodNET.API.ILua,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.BetweenStringListAndTable.TryParse(GmodNET.API.ILua,System.Collections.Generic.List{System.String}@,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1">
            <summary>
            Transformers derive from this class. Transformers help convert between .NET and Lua types.
            </summary>
            <example>
            Your subclass MUST register which type it converts to and from by registering with the following attribute.
            <code>
            <![CDATA[
            [ConvertsNetType(typeof(ExampleClass))]
            ]]>
            </code>
            </example>
            <typeparam name="TTarget">The type to return or accept in the methods</typeparam>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1.#ctor">
            <summary>
            Since a transformer is instantiated with Activator.CreateInstance there should be no parameters on the constructor.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1.Convert(GmodNET.API.ILua,`0)">
            <summary>
            Converts a given .NET object and pushes it on the Lua stack.
            </summary>
            <param name="lua"></param>
            <param name="input">The .NET object to convert to Lua</param>
            <returns>The amount of objects pushed to the Lua stack</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1.TryParse(GmodNET.API.ILua,`0@,System.Int32,System.Boolean)">
            <summary>
            Pulls or reads an object from the Lua stack at the given position and tries to convert it to a .NET object.
            </summary>
            <param name="lua"></param>
            <param name="value">The value pulled from the Lua stack</param>
            <param name="stackPos">The position to pull/read the object from</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
            <returns>Whether the value was succesfully parsed</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.LuaTransformerExtensions">
            <summary>
            Adds extensions relating to data transformation.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaTransformerExtensions.ApplyTransformerConvert(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            Instantiates a transformer of the given type and serves it the value to convert to Lua.
            </summary>
            <param name="lua"></param>
            <param name="transformer">The type of the transformer class (must inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1"/>)</param>
            <param name="value">The value to have the transformer convert to Lua</param>
            <returns>The amount of Lua objects pushed to the stack by the transformer</returns>
            <exception cref="T:System.ArgumentException">Thrown when the transformer type given does not inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1"/></exception>
        </member>
        <member name="M:GmodMongoDb.Binding.DataTransforming.LuaTransformerExtensions.ApplyTransformerParse(GmodNET.API.ILua,System.Type,System.Object@,System.Int32,System.Boolean)">
            <summary>
            Instantiates a transformer of the given type and executes it's TryParse to parse a value at the given Lua stack position.
            </summary>
            <param name="lua"></param>
            <param name="transformer">The type of the transformer class (must inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1"/>)</param>
            <param name="value">The value pulled from the Lua stack</param>
            <param name="stackPos">The position to pull/read the object from</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
            <returns>Whether the value was succesfully parsed as returned by the transformer's <see cref="M:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1.TryParse(GmodNET.API.ILua,`0@,System.Int32,System.Boolean)"/> method.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the transformer type given does not inherit <see cref="T:GmodMongoDb.Binding.DataTransforming.LuaValueTransformer`1"/></exception>
        </member>
        <member name="T:GmodMongoDb.Binding.DataTransforming.NamespaceDoc">
            <summary>
            Contains transformers that help convert between .NET and Lua types.
            </summary>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaExtensions">
            <summary>
            Helpful functions to debug or message in Lua
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.PrintFromAsync(GmodNET.API.ILua,System.String)">
            <summary>
            Prints a message in Lua the next Lua tick
            </summary>
            <param name="lua"></param>
            <param name="message">The message to show</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.Print(GmodNET.API.ILua,System.String)">
            <summary>
            Prints a message in Lua
            </summary>
            <param name="lua"></param>
            <param name="message">The message to show</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaExtensions.GetStack(GmodNET.API.ILua)">
            <summary>
            Builds a string representation of the stack by traversing all values on the Lua stack.
            </summary>
            <param name="lua"></param>
            <returns>A string containing the types on the stack</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaFunctionReference">
            <summary>
            A reference to a Lua function which can be called later.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.#ctor(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Create a reference for the function currently on the given position of the stack (or the top by default)
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The stack position of the function to reference</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.IsValid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call(System.Object[])">
            <summary>
            Call this Lua function without expecting results
            </summary>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call(System.Int32,System.Object[])">
            <summary>
            Call this Lua function expecting multiple results
            </summary>
            <param name="numResults">The amount of results we expect from the Lua function</param>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>The returned results in an object array</returns>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.Call``1(System.Object[])">
            <summary>
            Call this Lua function expecting a scalar result
            </summary>
            <typeparam name="T">The type we expect of the result</typeparam>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>The returned result as the provided type</returns>
            <remarks>Do not call this method from an async method. Instead use <see cref="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])"/>.</remarks>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <param name="arguments">The parameters to pass to the Lua function</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync(System.Int32,System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <param name="numResults">The amount of results we expect from the Lua function</param>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>A task that's called to return the result as the provided type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaFunctionReference.CallFromAsync``1(System.Object[])">
            <summary>
            This queues the function to be called back once Lua is ready to process it on the main thread.
            </summary>
            <typeparam name="T">The type we expect of the result</typeparam>
            <param name="arguments">The parameters to pass to the Lua function</param>
            <returns>A task that's called to return the result as the provided type</returns>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaMetaObjectBinding">
            <summary>
            The baseclass from which metatable classes can inherit. These classes specify how the metatable should look in Lua.
            Metatable classes can be marked with [LuaMetaTable] to give them an explicit type name. Otherwise their class name will be used.
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.LuaMetaObjectBinding.MetaTableTypeId">
            <summary>
            The metatable type id for this object, as returned by `lua.CreateMetaTable`
            </summary>
        </member>
        <member name="P:GmodMongoDb.Binding.LuaMetaObjectBinding.Reference">
            <summary>
            The pointer to the Lua instance of this object. Only filled when a method on this class is called from Lua.
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaMetaObjectBinding.lua">
            <summary>
            The Lua environment where this object lives
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaMetaObjectBinding.#ctor(GmodNET.API.ILua)">
            <summary>
            Instantiates the .NET Object, informing it of the Lua environment it's part of.
            </summary>
            <param name="lua">The Lua environment where this object lives</param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaReference">
            <summary>
            A reference to a Lua object, for example a table.
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaReference.lua">
            <summary>
            The Lua environment where the reference lives
            </summary>
        </member>
        <member name="F:GmodMongoDb.Binding.LuaReference.pointer">
            <summary>
            The pointer to the reference in Lua which can be pushed with `lua.ReferencePush` or freed with `lua.ReferenceFree`
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.#ctor(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Creates a reference to the Lua object at the given stack position and removes it from the stack.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The Lua object's position on the stack</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.IsValid(System.Int32)">
            <summary>
            Called to check if the Lua reference is of the type we expect it to be.
            </summary>
            <param name="stackPos">The Lua object's position on the stack</param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Free">
            <summary>
            Free the Lua object reference.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Push">
            <summary>
            Push the Lua object reference to the top of the stack.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaReference.Dispose">
            <summary>
            Called to dispose of the object. Calls <see cref="M:GmodMongoDb.Binding.LuaReference.Free"/>
            </summary>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaTableReference">
            <summary>
            Tracks a reference to a specific table in Lua
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.#ctor(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Create a reference for the table currently on the given position of the stack (or the top by default)
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The stack position of the function to reference</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.IsValid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTableReference.ForEach(System.Action{System.Object,System.Object})">
            <summary>
            Iterate the Lua table through a callback
            </summary>
            <param name="action">A callback which is given the key and value of each item in the table</param>
        </member>
        <member name="T:GmodMongoDb.Binding.LuaTaskScheduler">
            <summary>
            Helps schedule tasks to be executed safely from asynchronous methods.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.AddTask(System.Action)">
            <summary>
            Have an action be called from the Lua context safely and expect nothing to be returned.
            </summary>
            <param name="action">The action to call in the Lua context</param>
            <returns>A task that yields no result</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.AddTask``1(System.Func{``0})">
            <summary>
            Have a function be called from the Lua context safely and expect the given type to be returned.
            </summary>
            <typeparam name="T">The type you expect to be returned</typeparam>
            <param name="function">The function to be called in the Lua context</param>
            <returns>A task that yields a result of the given type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.ProcessQueue(GmodNET.API.ILua)">
            <summary>
            Check if there's tasks queued and call them immediately.
            </summary>
            <param name="lua"></param>
            <returns>Always 0 to inform Lua that nothing was returned from this hook</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.RegisterLuaCallback(GmodNET.API.ILua)">
            <summary>
            Link the LuaTaskScheduler with Lua by hooking into Tick.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.LuaTaskScheduler.UnregisterLuaCallback(GmodNET.API.ILua)">
            <summary>
            Unlink the LuaTaskScheduler from Lua by removing the appropriate Tick hook.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="T:GmodMongoDb.Binding.NamespaceDoc">
            <summary>
            Contains tools to bind .NET objects with Lua comfortably
            </summary>
        </member>
        <member name="T:GmodMongoDb.Binding.ReferenceManager">
            <summary>
            Helps keep track of handles and disposables. Call <see cref="M:GmodMongoDb.Binding.ReferenceManager.KillAll"/> to clean up any active handles.
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.ReferenceManager.Add(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Registers a handle so it can be cleaned up with <see cref="M:GmodMongoDb.Binding.ReferenceManager.KillAll"/> later.
            </summary>
            <param name="handle">The handle to register</param>
        </member>
        <member name="M:GmodMongoDb.Binding.ReferenceManager.Add(System.IDisposable)">
            <summary>
            Registers a disposable so it can be cleaned up with <see cref="M:GmodMongoDb.Binding.ReferenceManager.KillAll"/> later.
            </summary>
            <param name="disposable">The disposable object to register</param>
        </member>
        <member name="M:GmodMongoDb.Binding.ReferenceManager.KillAll">
            <summary>
            Dispose and free all registered disposable objects and handles respectively.
            </summary>
        </member>
        <member name="T:GmodMongoDb.Binding.TypeConverter">
            <summary>
            Helps converting between .NET objects/types and Lua types
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.DiscoverDataTransformers">
            <summary>
            Iterates all Transformers and registers their Type for later use. In order to create a transformer you should inherit LuaValueTransformer
            </summary>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.CreateDiscoveredMetaTableDefinitions(GmodNET.API.ILua)">
            <summary>
            Eagerly search for metatable definitions and create the metatables.
            </summary>
            <param name="lua"></param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)">
            <summary>
            Generates userdata with a metatable by looking at attributes on the given object. Pushes the userdata onto the stack.
            </summary>
            <param name="lua"></param>
            <param name="instance">The object to generate into userdata</param>
            <returns>The metatable type id that was created for this userdata</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PushManagedObject(GmodNET.API.ILua,System.Object)">
            <summary>
            Pushes a .NET managed object onto the stack as userdata.
            
            Consider using <see cref="M:GmodMongoDb.Binding.TypeConverter.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)"/> if you want to interact with the userdata from Lua.
            </summary>
            <param name="lua"></param>
            <param name="managed">The object to convert to userdata and push</param>
            <returns>Returns the metatable type id which was applied to the userdata</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PullManagedObject(GmodNET.API.ILua,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Pull userdata from the stack at the given position that has the given type id. Converts it to a .NET object.
            </summary>
            <param name="lua"></param>
            <param name="typeId">The metatable type id of the userdata as returned by <see cref="M:GmodMongoDb.Binding.TypeConverter.PushManagedObject(GmodNET.API.ILua,System.Object)"/> or <see cref="M:GmodMongoDb.Binding.TypeConverter.GenerateUserDataFromObject(GmodNET.API.ILua,GmodMongoDb.Binding.LuaMetaObjectBinding)"/></param>
            <param name="stackPos">The position of the managed object</param>
            <param name="forceKeepOnStack">Keep the object on the stack, false to remove it</param>
            <returns>The .NET object converted from Lua</returns>
            <exception cref="T:System.NullReferenceException">Thrown when a null pointer is found or the userdata is no longer valid</exception>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PushType(GmodNET.API.ILua,System.Type,System.Object)">
            <summary>
            Push a value of a specific type to the Lua stack. Applies a transformer where possible.
            </summary>
            <param name="lua"></param>
            <param name="type">The type of the value to push</param>
            <param name="value">The value to push</param>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PullType(GmodNET.API.ILua,System.Type,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <param name="lua"></param>
            <param name="type">The expected type of the value on the stack</param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PullType(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and try convert it to an associated .NET type.
            </summary>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.PullType``1(GmodNET.API.ILua,System.Int32,System.Boolean)">
            <summary>
            Pop a value from the Lua stack and convert it to the specified .NET type.
            </summary>
            <typeparam name="T">The expected type of the value on the stack</typeparam>
            <param name="lua"></param>
            <param name="stackPos">The position of the value</param>
            <param name="forceKeepOnStack">Order the function not to pop after getting the value</param>
            <returns>The .NET object</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.TryGetMetaTableType(System.Int32,System.Type@)">
            <summary>
            Try to convert a Lua type to a metatable.
            </summary>
            <param name="luaType">The type id that's suspected to be a metatable type</param>
            <param name="result">The converted .NET type on success. Null otherwise.</param>
            <returns>If the type is succesfully converted to a metatable type.</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.LuaTypeToDotNetType(GmodNET.API.TYPES)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="M:GmodMongoDb.Binding.TypeConverter.LuaTypeToDotNetType(System.Int32)">
            <summary>
            Convert a specified Lua type to a .NET type.
            </summary>
            <param name="luaType">The Lua type to convert (must be castable to <see cref="T:GmodNET.API.TYPES"/>)</param>
            <returns>The converted .NET type</returns>
        </member>
        <member name="T:GmodMongoDb.DataTransforming.BetweenBsonDocumentAndTable">
            <summary>
            Transformers from a native BsonDocument to a Lua table or vice versa.
            </summary>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentAndTable.CreateLuaBsonDocument(GmodNET.API.ILua,MongoDB.Bson.BsonDocument)">
            <summary>
            Create a <see cref="T:GmodMongoDb.MongoBsonDocument"/> object table with Lua metatable for the given BsonDocument. Pushes the object table to the stack.
            </summary>
            <param name="lua"></param>
            <param name="rawDocument">The true BsonDocument to encapsulate</param>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentAndTable.Convert(GmodNET.API.ILua,GmodMongoDb.MongoBsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentAndTable.TryParse(GmodNET.API.ILua,GmodMongoDb.MongoBsonDocument@,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.DataTransforming.BetweenBsonDocumentListAndTable">
            <summary>
            Transformers from a native BsonDocument to a Lua table or vice versa.
            </summary>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentListAndTable.CreateLuaBsonDocument(GmodNET.API.ILua,MongoDB.Bson.BsonDocument)">
            <summary>
            Create a <see cref="T:GmodMongoDb.MongoBsonDocument"/> object table with Lua metatable for the given BsonDocument. Pushes the object table to the stack.
            </summary>
            <param name="lua"></param>
            <param name="rawDocument">The true BsonDocument to encapsulate</param>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentListAndTable.Convert(GmodNET.API.ILua,System.Collections.Generic.List{MongoDB.Bson.BsonDocument})">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentListAndTable.TryParse(GmodNET.API.ILua,System.Collections.Generic.List{MongoDB.Bson.BsonDocument}@,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.Mongo">
            <summary>
            The main Mongo library form which you can instantiate MongoDB objects like the connection client (<see cref="M:GmodMongoDb.Mongo.NewClient(System.String)"/>).
            </summary>
        </member>
        <member name="M:GmodMongoDb.Mongo.#ctor(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Mongo.NewClient(System.String)">
            <summary>
            Initiates a new MongoClient. Only one MongoClient should exist and it should be reused.
            </summary>
            <remarks>
            <a href="mongodb.github.io/mongo-csharp-driver/2.2/reference/driver/connecting/#mongo-client">View the relevant .NET MongoDB Driver documentation</a>
            </remarks>
            <example>
            Example how to call this method from Lua in order to connect to a database.
            <code language="Lua">
            client = mongo.NewClient("mongodb://username_here:password_here@127.0.0.1:27017/database_here?retryWrites=true&amp;w=majority")
            </code>
            </example>
            <param name="connectionString">The connection string with connection information</param>
            <returns>The MongoClient which will interface with database</returns>
        </member>
        <member name="M:GmodMongoDb.Mongo.NewBsonDocument(GmodMongoDb.MongoBsonDocument)">
            <summary>
            Creates a new BSON Document from the provided Lua table.
            </summary>
            <param name="table">The table to use to build a BSON Document</param>
            <returns></returns>
            <remarks><see cref="M:GmodMongoDb.DataTransforming.BetweenBsonDocumentAndTable.TryParse(GmodNET.API.ILua,GmodMongoDb.MongoBsonDocument@,System.Int32,System.Boolean)"/> will automatically handle this conversion.</remarks>
        </member>
        <member name="M:GmodMongoDb.Mongo.NewBsonDocument(System.String)">
            <summary>
            Creates a new BSON Document from the provided json.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:GmodMongoDb.Mongo.Dispose">
            <summary>
            Disposes the MongoDB client connection
            </summary>
        </member>
        <member name="T:GmodMongoDb.MongoBsonDocument">
            <summary>
            Exposes a MongoDB BSON Document to Lua.
            </summary>
            <remarks>
            In Lua you can get a BSON document by querying a collection using <see cref="M:GmodMongoDb.MongoCollection.Find(GmodMongoDb.MongoBsonDocument)"/>.
            You can also generate your own BSON document from a table by using <see cref="M:GmodMongoDb.Mongo.NewBsonDocument(GmodMongoDb.MongoBsonDocument)"/>
            </remarks>
        </member>
        <member name="P:GmodMongoDb.MongoBsonDocument.BsonDocument">
            <summary>
            The native MongoDB BSON Document object
            </summary>
        </member>
        <member name="M:GmodMongoDb.MongoBsonDocument.#ctor(GmodNET.API.ILua,MongoDB.Bson.BsonDocument)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.MongoBsonDocument.ToJson">
            <summary>
            Converts the BSON Document to a JSON string
            </summary>
            <returns>The JSON representation of this BSON Document</returns>
        </member>
        <member name="M:GmodMongoDb.MongoBsonDocument.Pairs">
            <summary>
            Call this function instead of using <c language="Lua">pairs</c>.
            </summary>
            <remarks>
            The __pairs metamethod is implemented, but won't work in Garry's Mod. If Garry's Mod updates to a version >= Lua 5.2 it will.
            Read more about pairs in <a href="https://www.lua.org/manual/5.3/manual.html#pdf-next">the Lua manual</a>
            </remarks>
            <example>
            You can loop over the values in a BSON Document like so:
            <code language="Lua">
            for key, value in bsonDocument:Pairs() do
                print(key, value)
            end
            </code>
            </example>
            <returns>Multiple values: the next function that iterates the object, the object/table itself and nil</returns>
        </member>
        <member name="M:GmodMongoDb.MongoBsonDocument.ToString">
            <summary>
            Converts the BSON Document to a json string
            </summary>
            <returns>The JSON representation of this BSON Document</returns>
        </member>
        <member name="T:GmodMongoDb.MongoClient">
            <summary>
            Exposes a MongoDB connection client to Lua.
            </summary>
            <remarks>
            In Lua you can get a client by using <see cref="M:GmodMongoDb.Mongo.NewClient(System.String)"/> 
            </remarks>
        </member>
        <member name="M:GmodMongoDb.MongoClient.#ctor(GmodNET.API.ILua,MongoDB.Driver.MongoClient)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.MongoClient.GetDatabase(System.String)">
            <summary>
            Queries the connection for the database object identified by the given name. If it does not exist it will create it.
            </summary>
            <remarks>
            <a href="mongodb.github.io/mongo-csharp-driver/2.2/reference/driver/connecting/#mongo-database">View the relevant .NET MongoDB Driver documentation</a>
            </remarks>
            <example>
            In Lua you can get the database by asking a <see cref="T:GmodMongoDb.MongoClient"/> for it:
            <code language="Lua"><![CDATA[
            local database = client:GetDatabase("database_name")
            ]]></code>
            </example>
            <param name="name">The database name</param>
            <returns>The database object</returns>
        </member>
        <member name="T:GmodMongoDb.MongoCollection">
            <summary>
            Exposes a MongoDB collection to Lua.
            </summary>
            <remarks>
            In Lua you can get the collection by using <see cref="M:GmodMongoDb.MongoDatabase.GetCollection(System.String)"/> 
            </remarks>
        </member>
        <member name="M:GmodMongoDb.MongoCollection.#ctor(GmodNET.API.ILua,MongoDB.Driver.IMongoCollection{MongoDB.Bson.BsonDocument})">
            <inheritdoc/>
        </member>
        <member name="T:GmodMongoDb.MongoDatabase">
            <summary>
            Exposes a MongoDB database to Lua.
            </summary>
            <remarks>
            In Lua you can get the collection by using <see cref="M:GmodMongoDb.MongoClient.GetDatabase(System.String)"/> 
            </remarks>
        </member>
        <member name="M:GmodMongoDb.MongoDatabase.#ctor(GmodNET.API.ILua,MongoDB.Driver.IMongoDatabase)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.MongoDatabase.GetCollection(System.String)">
            <summary>
            Fetches a MongoDB Collection from this database
            </summary>
            <example>
            This is how you can get the collection in Lua:
            <code language="Lua"><![CDATA[
            local collection = database:GetCollection("collection_name")
            ]]></code>
            </example>
            <param name="name">The name of the collection</param>
            <returns>The retrieved collection</returns>
        </member>
        <member name="T:GmodMongoDb.NamespaceDoc">
            <summary>
            Contains the userdata definitions that expose the .NET MongoDB Driver to Lua.
            </summary>
        </member>
        <member name="T:GmodMongoDb.Setup">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleName">
            <inheritdoc/>
        </member>
        <member name="P:GmodMongoDb.Setup.ModuleVersion">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Load(GmodNET.API.ILua,System.Boolean,GmodNET.API.ModuleAssemblyLoadContext)">
            <inheritdoc/>
        </member>
        <member name="M:GmodMongoDb.Setup.Unload(GmodNET.API.ILua)">
            <inheritdoc/>
        </member>
    </members>
</doc>
